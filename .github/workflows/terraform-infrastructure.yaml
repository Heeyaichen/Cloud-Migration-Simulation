# Terraform Infrastructure Workflow
# Prerequisites:
# 1. Generate Azure credentials using Azure CLI:
#   az login
#   az account show --query id -o tsv
#   az ad sp create-for-rbac --name "github-actions" --role contributor \
#   --scopes /subscriptions/<subscription-id> --sdk-auth
#
# 2. Add the JSON output as a GitHub Secret named 'AZURE_CREDENTIALS'
#    Go to Settings > Secrets and variables > Actions > New repository secret

name: Terraform Infrastructure

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy infrastructure to"
        type: choice
        required: true
        options:
          - "development"
          - "staging"
          - "production"
      apply_changes:
        description: "Apply changes to Terraform configuration"
        type: boolean
        required: true
        default: false
  push:
    branches: ["main"]
    paths:
      - "terraform/*.tf"
  pull_request:
    branches: ["main"]
    paths:
      - "terraform/*.tf"

permissions:
  contents: read
  pull-requests: write

jobs:
  bootstrap:
    name: "Bootstrap Infrastructure"
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: ./terraform/bootstrap

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false

        # Login to Azure using the Azure credentials stored in the 'AZURE_CREDENTIALS' GitHub Secret
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

        # Set the ARM Subscription ID as an environment variable
      - name: Set ARM Subscription ID
        run: echo "ARM_SUBSCRIPTION_ID=$(jq -r .subscriptionId <<< '${{ secrets.AZURE_CREDENTIALS }}')" >> $GITHUB_ENV

        # Check if the resource group "tfstate-rg" exists in the Azure subscription
      - name: Check if Resource Group Exists
        id: check_rg_exists
        uses: Azure/cli@v1
        with:
          inlineScript: |
            exists=$(az group exists -n "tfstate-rg")
            echo "rg_exists=$exists" >> $GITHUB_OUTPUT

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: terraform init -upgrade

      # Check if the resource group "tfstate-rg" is already in the Terraform state
      # This step checks if the resource group "tfstate-rg" is already managed by Terraform
      # - name: Check Terraform State
      #   id: check_state
      #   run: |
      #     if terraform state list | grep -q 'azurerm_resource_group.state'; then
      #       echo "in_state=true" >> $GITHUB_OUTPUT
      #     else
      #       echo "in_state=false" >> $GITHUB_OUTPUT
      #     fi

      # Import the existing resource group "tfstate-rg" into the Terraform state if it does not exist
      # - name: Import existing Resource Group if needed
      # Only run import if the resource group "tfstate-rg" does not exist
      #   if: steps.check_rg_exists.outputs.rg_exists == 'true' && steps.check_state.outputs.in_state == 'false'
      #   run: |
      #     echo "Importing resource group into state..."
      #     terraform import azurerm_resource_group.state "/subscriptions/$ARM_SUBSCRIPTION_ID/resourceGroups/tfstate-rg"

      # Checks that all Terraform configuration files adhere to a canonical format
      - name: Terraform Format
        run: terraform fmt -check

      # Generates an execution plan for Terraform
      - name: Terraform Plan
        # Only run plan if the resource group "tfstate-rg" does not exist
        if: steps.check_rg_exists.outputs.rg_exists == 'false'
        run: terraform plan -input=false

      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Only apply changes if the event that triggered the workflow is a push to the main branch or a manual workflow dispatch event with the `apply_changes`=true
      - name: Terraform Apply
        # Only run apply if the resource group "tfstate-rg" does not exist
        if: |
          steps.check_rg_exists.outputs.rg_exists == 'false' &&
          (
            (github.ref == 'refs/heads/main' && github.event_name == 'push') ||
            (github.event_name == 'workflow_dispatch' && inputs.apply_changes == true)
          )
        run: terraform apply -auto-approve -input=false

      # Skip the deployment if the resource group "tfstate-rg" already exists
      - name: Skip Message
        if: steps.check_rg_exists.outputs.rg_exists == 'true'
        run: echo "Bootstrap infrastructure already exists, skipping deployment"

  infrastructure:
    name: "Deploy Main Infrastructure"
    needs: bootstrap
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./terraform
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false

      # Login to Azure using the Azure credentials stored in the 'AZURE_CREDENTIALS' GitHub Secret
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Set the ARM Subscription ID as an environment variable
      - name: Set ARM Subscription ID
        run: echo "ARM_SUBSCRIPTION_ID=$(jq -r .subscriptionId <<< '${{ secrets.AZURE_CREDENTIALS }}')" >> $GITHUB_ENV

      - name: Terraform Init
        run: terraform init -migrate-state

      - name: Terraform Plan
        run: |
          terraform plan -out=tfplan

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && inputs.apply_changes == true)
        run: |
          terraform apply -var-file="terraform.tfvars" -auto-approve -input=false

      # Save Terraform outputs as JSON artifact
      - name: Save Terraform Outputs
        working-directory: ./terraform
        run: terraform output -json > terraform-outputs.json

      # Upload JSON outputs as artifact
      - name: Upload Terraform Outputs
        uses: actions/upload-artifact@v4
        with:
          name: terraform-outputs
          path: terraform/terraform-outputs.json

      - name: Upload Terraform Plan
        if: github.event_name == 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan
          path: ./terraform/tfplan
          retention-days: 5
